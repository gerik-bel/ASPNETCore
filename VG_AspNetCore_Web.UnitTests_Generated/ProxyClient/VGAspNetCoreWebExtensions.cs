// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Swagger
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for VGAspNetCoreWeb.
    /// </summary>
    public static partial class VGAspNetCoreWebExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void Image(this IVGAspNetCoreWeb operations, int id)
            {
                operations.ImageAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ImageAsync(this IVGAspNetCoreWeb operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ImageWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void Image1(this IVGAspNetCoreWeb operations, int id)
            {
                operations.Image1Async(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task Image1Async(this IVGAspNetCoreWeb operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.Image1WithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get list of categories
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='includeProducts'>
            /// Include category products into result - true/false
            /// </param>
            public static void Get(this IVGAspNetCoreWeb operations, bool? includeProducts = false)
            {
                operations.GetAsync(includeProducts).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get list of categories
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='includeProducts'>
            /// Include category products into result - true/false
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetAsync(this IVGAspNetCoreWeb operations, bool? includeProducts = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetWithHttpMessagesAsync(includeProducts, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get category by identifier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Category identifier
            /// </param>
            /// <param name='includeProducts'>
            /// Include category products into result - true/false
            /// </param>
            public static void Get1(this IVGAspNetCoreWeb operations, int id, bool? includeProducts = false)
            {
                operations.Get1Async(id, includeProducts).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get category by identifier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Category identifier
            /// </param>
            /// <param name='includeProducts'>
            /// Include category products into result - true/false
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task Get1Async(this IVGAspNetCoreWeb operations, int id, bool? includeProducts = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.Get1WithHttpMessagesAsync(id, includeProducts, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get category image contetnt by identifier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Category identifier
            /// </param>
            public static void Get2(this IVGAspNetCoreWeb operations, int id)
            {
                operations.Get2Async(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get category image contetnt by identifier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Category identifier
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task Get2Async(this IVGAspNetCoreWeb operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.Get2WithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update category image content by identifier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Category identifier
            /// </param>
            /// <param name='contentType'>
            /// </param>
            /// <param name='contentDisposition'>
            /// </param>
            /// <param name='headers'>
            /// </param>
            /// <param name='length'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='fileName'>
            /// </param>
            public static void Post(this IVGAspNetCoreWeb operations, int id, string contentType = default(string), string contentDisposition = default(string), string headers = default(string), int? length = default(int?), string name = default(string), string fileName = default(string))
            {
                operations.PostAsync(id, contentType, contentDisposition, headers, length, name, fileName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update category image content by identifier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Category identifier
            /// </param>
            /// <param name='contentType'>
            /// </param>
            /// <param name='contentDisposition'>
            /// </param>
            /// <param name='headers'>
            /// </param>
            /// <param name='length'>
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='fileName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostAsync(this IVGAspNetCoreWeb operations, int id, string contentType = default(string), string contentDisposition = default(string), string headers = default(string), int? length = default(int?), string name = default(string), string fileName = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostWithHttpMessagesAsync(id, contentType, contentDisposition, headers, length, name, fileName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get list of products
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='includeCategory'>
            /// Include product category into result - true/false
            /// </param>
            /// <param name='includeSupplier'>
            /// Include product supplier into result - true/false
            /// </param>
            /// <param name='includeOrderDetails'>
            /// Include product order details into result - true/false
            /// </param>
            public static void Get3(this IVGAspNetCoreWeb operations, bool? includeCategory = false, bool? includeSupplier = false, bool? includeOrderDetails = false)
            {
                operations.Get3Async(includeCategory, includeSupplier, includeOrderDetails).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get list of products
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='includeCategory'>
            /// Include product category into result - true/false
            /// </param>
            /// <param name='includeSupplier'>
            /// Include product supplier into result - true/false
            /// </param>
            /// <param name='includeOrderDetails'>
            /// Include product order details into result - true/false
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task Get3Async(this IVGAspNetCoreWeb operations, bool? includeCategory = false, bool? includeSupplier = false, bool? includeOrderDetails = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.Get3WithHttpMessagesAsync(includeCategory, includeSupplier, includeOrderDetails, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Create new product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New product data
            /// </param>
            public static void Post1(this IVGAspNetCoreWeb operations, Products body = default(Products))
            {
                operations.Post1Async(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Create new product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// New product data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task Post1Async(this IVGAspNetCoreWeb operations, Products body = default(Products), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.Post1WithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get product by identifier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Product identifier
            /// </param>
            /// <param name='includeCategory'>
            /// Include product category into result - true/false
            /// </param>
            /// <param name='includeSupplier'>
            /// Include product supplier into result - true/false
            /// </param>
            /// <param name='includeOrderDetails'>
            /// Include product order details into result - true/false
            /// </param>
            public static void Get4(this IVGAspNetCoreWeb operations, int id, bool? includeCategory = false, bool? includeSupplier = false, bool? includeOrderDetails = false)
            {
                operations.Get4Async(id, includeCategory, includeSupplier, includeOrderDetails).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get product by identifier
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Product identifier
            /// </param>
            /// <param name='includeCategory'>
            /// Include product category into result - true/false
            /// </param>
            /// <param name='includeSupplier'>
            /// Include product supplier into result - true/false
            /// </param>
            /// <param name='includeOrderDetails'>
            /// Include product order details into result - true/false
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task Get4Async(this IVGAspNetCoreWeb operations, int id, bool? includeCategory = false, bool? includeSupplier = false, bool? includeOrderDetails = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.Get4WithHttpMessagesAsync(id, includeCategory, includeSupplier, includeOrderDetails, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update product fully
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Product identifier
            /// </param>
            /// <param name='body'>
            /// Product data
            /// </param>
            public static void Put(this IVGAspNetCoreWeb operations, int id, Products body = default(Products))
            {
                operations.PutAsync(id, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update product fully
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Product identifier
            /// </param>
            /// <param name='body'>
            /// Product data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutAsync(this IVGAspNetCoreWeb operations, int id, Products body = default(Products), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Update product partially
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Product identifier
            /// </param>
            /// <param name='body'>
            /// Product data
            /// </param>
            public static void Patch(this IVGAspNetCoreWeb operations, int id, Products body = default(Products))
            {
                operations.PatchAsync(id, body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update product partially
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Product identifier
            /// </param>
            /// <param name='body'>
            /// Product data
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PatchAsync(this IVGAspNetCoreWeb operations, int id, Products body = default(Products), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PatchWithHttpMessagesAsync(id, body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Delete product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Product identifier
            /// </param>
            public static void Delete(this IVGAspNetCoreWeb operations, int id)
            {
                operations.DeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete product
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Product identifier
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IVGAspNetCoreWeb operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
