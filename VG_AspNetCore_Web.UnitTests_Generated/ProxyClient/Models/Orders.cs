// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Swagger.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Orders
    {
        /// <summary>
        /// Initializes a new instance of the Orders class.
        /// </summary>
        public Orders()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Orders class.
        /// </summary>
        public Orders(int? orderId = default(int?), string customerId = default(string), int? employeeId = default(int?), System.DateTime? orderDate = default(System.DateTime?), System.DateTime? requiredDate = default(System.DateTime?), System.DateTime? shippedDate = default(System.DateTime?), int? shipVia = default(int?), double? freight = default(double?), string shipName = default(string), string shipAddress = default(string), string shipCity = default(string), string shipRegion = default(string), string shipPostalCode = default(string), string shipCountry = default(string), Customers customer = default(Customers), Employees employee = default(Employees), Shippers shipViaNavigation = default(Shippers), IList<OrderDetails> orderDetails = default(IList<OrderDetails>))
        {
            OrderId = orderId;
            CustomerId = customerId;
            EmployeeId = employeeId;
            OrderDate = orderDate;
            RequiredDate = requiredDate;
            ShippedDate = shippedDate;
            ShipVia = shipVia;
            Freight = freight;
            ShipName = shipName;
            ShipAddress = shipAddress;
            ShipCity = shipCity;
            ShipRegion = shipRegion;
            ShipPostalCode = shipPostalCode;
            ShipCountry = shipCountry;
            Customer = customer;
            Employee = employee;
            ShipViaNavigation = shipViaNavigation;
            OrderDetails = orderDetails;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "OrderId")]
        public int? OrderId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "CustomerId")]
        public string CustomerId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EmployeeId")]
        public int? EmployeeId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "OrderDate")]
        public System.DateTime? OrderDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RequiredDate")]
        public System.DateTime? RequiredDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ShippedDate")]
        public System.DateTime? ShippedDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ShipVia")]
        public int? ShipVia { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Freight")]
        public double? Freight { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ShipName")]
        public string ShipName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ShipAddress")]
        public string ShipAddress { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ShipCity")]
        public string ShipCity { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ShipRegion")]
        public string ShipRegion { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ShipPostalCode")]
        public string ShipPostalCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ShipCountry")]
        public string ShipCountry { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Customer")]
        public Customers Customer { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Employee")]
        public Employees Employee { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ShipViaNavigation")]
        public Shippers ShipViaNavigation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "OrderDetails")]
        public IList<OrderDetails> OrderDetails { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (CustomerId != null)
            {
                if (CustomerId.Length > 5)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "CustomerId", 5);
                }
                if (CustomerId.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "CustomerId", 0);
                }
            }
            if (ShipName != null)
            {
                if (ShipName.Length > 40)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "ShipName", 40);
                }
                if (ShipName.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "ShipName", 0);
                }
            }
            if (ShipAddress != null)
            {
                if (ShipAddress.Length > 60)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "ShipAddress", 60);
                }
                if (ShipAddress.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "ShipAddress", 0);
                }
            }
            if (ShipCity != null)
            {
                if (ShipCity.Length > 15)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "ShipCity", 15);
                }
                if (ShipCity.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "ShipCity", 0);
                }
            }
            if (ShipRegion != null)
            {
                if (ShipRegion.Length > 15)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "ShipRegion", 15);
                }
                if (ShipRegion.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "ShipRegion", 0);
                }
            }
            if (ShipPostalCode != null)
            {
                if (ShipPostalCode.Length > 10)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "ShipPostalCode", 10);
                }
                if (ShipPostalCode.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "ShipPostalCode", 0);
                }
            }
            if (ShipCountry != null)
            {
                if (ShipCountry.Length > 15)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "ShipCountry", 15);
                }
                if (ShipCountry.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "ShipCountry", 0);
                }
            }
            if (Customer != null)
            {
                Customer.Validate();
            }
            if (Employee != null)
            {
                Employee.Validate();
            }
            if (ShipViaNavigation != null)
            {
                ShipViaNavigation.Validate();
            }
            if (OrderDetails != null)
            {
                foreach (var element in OrderDetails)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
