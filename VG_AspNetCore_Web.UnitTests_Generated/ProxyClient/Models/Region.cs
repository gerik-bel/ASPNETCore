// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Swagger.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Region
    {
        /// <summary>
        /// Initializes a new instance of the Region class.
        /// </summary>
        public Region()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Region class.
        /// </summary>
        public Region(string regionDescription, int? regionId = default(int?), IList<Territories> territories = default(IList<Territories>))
        {
            RegionId = regionId;
            RegionDescription = regionDescription;
            Territories = territories;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RegionId")]
        public int? RegionId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RegionDescription")]
        public string RegionDescription { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Territories")]
        public IList<Territories> Territories { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (RegionDescription == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RegionDescription");
            }
            if (RegionDescription != null)
            {
                if (RegionDescription.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "RegionDescription", 50);
                }
                if (RegionDescription.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "RegionDescription", 0);
                }
            }
            if (Territories != null)
            {
                foreach (var element in Territories)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
