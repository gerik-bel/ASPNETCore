// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Swagger.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Employees
    {
        /// <summary>
        /// Initializes a new instance of the Employees class.
        /// </summary>
        public Employees()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Employees class.
        /// </summary>
        public Employees(string lastName, string firstName, int? employeeId = default(int?), string title = default(string), string titleOfCourtesy = default(string), System.DateTime? birthDate = default(System.DateTime?), System.DateTime? hireDate = default(System.DateTime?), string address = default(string), string city = default(string), string region = default(string), string postalCode = default(string), string country = default(string), string homePhone = default(string), string extension = default(string), byte[] photo = default(byte[]), string notes = default(string), int? reportsTo = default(int?), string photoPath = default(string), Employees reportsToNavigation = default(Employees), IList<EmployeeTerritories> employeeTerritories = default(IList<EmployeeTerritories>), IList<Employees> inverseReportsToNavigation = default(IList<Employees>), IList<Orders> orders = default(IList<Orders>))
        {
            EmployeeId = employeeId;
            LastName = lastName;
            FirstName = firstName;
            Title = title;
            TitleOfCourtesy = titleOfCourtesy;
            BirthDate = birthDate;
            HireDate = hireDate;
            Address = address;
            City = city;
            Region = region;
            PostalCode = postalCode;
            Country = country;
            HomePhone = homePhone;
            Extension = extension;
            Photo = photo;
            Notes = notes;
            ReportsTo = reportsTo;
            PhotoPath = photoPath;
            ReportsToNavigation = reportsToNavigation;
            EmployeeTerritories = employeeTerritories;
            InverseReportsToNavigation = inverseReportsToNavigation;
            Orders = orders;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EmployeeId")]
        public int? EmployeeId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "LastName")]
        public string LastName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "FirstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Title")]
        public string Title { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "TitleOfCourtesy")]
        public string TitleOfCourtesy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "BirthDate")]
        public System.DateTime? BirthDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "HireDate")]
        public System.DateTime? HireDate { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Address")]
        public string Address { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "City")]
        public string City { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Region")]
        public string Region { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PostalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Country")]
        public string Country { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "HomePhone")]
        public string HomePhone { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Extension")]
        public string Extension { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Photo")]
        public byte[] Photo { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Notes")]
        public string Notes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ReportsTo")]
        public int? ReportsTo { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "PhotoPath")]
        public string PhotoPath { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ReportsToNavigation")]
        public Employees ReportsToNavigation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EmployeeTerritories")]
        public IList<EmployeeTerritories> EmployeeTerritories { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "InverseReportsToNavigation")]
        public IList<Employees> InverseReportsToNavigation { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Orders")]
        public IList<Orders> Orders { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (LastName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "LastName");
            }
            if (FirstName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FirstName");
            }
            if (LastName != null)
            {
                if (LastName.Length > 20)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "LastName", 20);
                }
                if (LastName.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "LastName", 0);
                }
            }
            if (FirstName != null)
            {
                if (FirstName.Length > 10)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "FirstName", 10);
                }
                if (FirstName.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "FirstName", 0);
                }
            }
            if (Title != null)
            {
                if (Title.Length > 30)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Title", 30);
                }
                if (Title.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Title", 0);
                }
            }
            if (TitleOfCourtesy != null)
            {
                if (TitleOfCourtesy.Length > 25)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "TitleOfCourtesy", 25);
                }
                if (TitleOfCourtesy.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "TitleOfCourtesy", 0);
                }
            }
            if (Address != null)
            {
                if (Address.Length > 60)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Address", 60);
                }
                if (Address.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Address", 0);
                }
            }
            if (City != null)
            {
                if (City.Length > 15)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "City", 15);
                }
                if (City.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "City", 0);
                }
            }
            if (Region != null)
            {
                if (Region.Length > 15)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Region", 15);
                }
                if (Region.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Region", 0);
                }
            }
            if (PostalCode != null)
            {
                if (PostalCode.Length > 10)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "PostalCode", 10);
                }
                if (PostalCode.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "PostalCode", 0);
                }
            }
            if (Country != null)
            {
                if (Country.Length > 15)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Country", 15);
                }
                if (Country.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Country", 0);
                }
            }
            if (HomePhone != null)
            {
                if (HomePhone.Length > 24)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "HomePhone", 24);
                }
                if (HomePhone.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "HomePhone", 0);
                }
            }
            if (Extension != null)
            {
                if (Extension.Length > 4)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Extension", 4);
                }
                if (Extension.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Extension", 0);
                }
            }
            if (PhotoPath != null)
            {
                if (PhotoPath.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "PhotoPath", 255);
                }
                if (PhotoPath.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "PhotoPath", 0);
                }
            }
            if (ReportsToNavigation != null)
            {
                ReportsToNavigation.Validate();
            }
            if (EmployeeTerritories != null)
            {
                foreach (var element in EmployeeTerritories)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (InverseReportsToNavigation != null)
            {
                foreach (var element1 in InverseReportsToNavigation)
                {
                    if (element1 != null)
                    {
                        element1.Validate();
                    }
                }
            }
            if (Orders != null)
            {
                foreach (var element2 in Orders)
                {
                    if (element2 != null)
                    {
                        element2.Validate();
                    }
                }
            }
        }
    }
}
