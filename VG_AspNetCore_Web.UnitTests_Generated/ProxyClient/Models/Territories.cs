// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Swagger.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Territories
    {
        /// <summary>
        /// Initializes a new instance of the Territories class.
        /// </summary>
        public Territories()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Territories class.
        /// </summary>
        public Territories(string territoryDescription, string territoryId = default(string), int? regionId = default(int?), Region region = default(Region), IList<EmployeeTerritories> employeeTerritories = default(IList<EmployeeTerritories>))
        {
            TerritoryId = territoryId;
            TerritoryDescription = territoryDescription;
            RegionId = regionId;
            Region = region;
            EmployeeTerritories = employeeTerritories;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "TerritoryId")]
        public string TerritoryId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "TerritoryDescription")]
        public string TerritoryDescription { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "RegionId")]
        public int? RegionId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Region")]
        public Region Region { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "EmployeeTerritories")]
        public IList<EmployeeTerritories> EmployeeTerritories { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (TerritoryDescription == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TerritoryDescription");
            }
            if (TerritoryId != null)
            {
                if (TerritoryId.Length > 20)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "TerritoryId", 20);
                }
                if (TerritoryId.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "TerritoryId", 0);
                }
            }
            if (TerritoryDescription != null)
            {
                if (TerritoryDescription.Length > 50)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "TerritoryDescription", 50);
                }
                if (TerritoryDescription.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "TerritoryDescription", 0);
                }
            }
            if (Region != null)
            {
                Region.Validate();
            }
            if (EmployeeTerritories != null)
            {
                foreach (var element in EmployeeTerritories)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
